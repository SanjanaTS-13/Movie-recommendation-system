# -*- coding: utf-8 -*-
"""Testing.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/11wMDx6kfA8NaeJ9JwPi0qxD4o4Hs6kXe
"""

import joblib
import boto3

# Download the preprocessing objects from S3
s3 = boto3.client('s3')
s3.download_file('movierecommendations3', 'mlb.pkl', 'mlb.pkl')
s3.download_file('movierecommendations3', 'le.pkl', 'le.pkl')

# Load the objects
mlb = joblib.load('mlb.pkl')
le = joblib.load('le.pkl')

print("mlb and le loaded successfully.")

import numpy as np
import pandas as pd
# Example input genres
input_genres = ["Adventure", "Crime"]

input_df = pd.DataFrame({"id": [1], "genres": [",".join(input_genres)]})

# Save to CSV
input_csv_path = 'input_genres.csv'
input_df.to_csv(input_csv_path, index=False)
print(f"Input genres saved to: {input_csv_path}")

# input_encoded = np.zeros(len(mlb.classes_))  # Initialize zero vector
# for genre in input_genres:
#     if genre in mlb.classes_:  # Check if genre is in mlb.classes_
#         idx = list(mlb.classes_).index(genre)  # Find the index of the genre
#         input_encoded[idx] = 1  # Set the corresponding index to 1

# print("Encoded Test Data:", input_encoded)

# Load the input CSV
test_genres_df = pd.read_csv(input_csv_path)

# Convert 'genres' column into a list of genres
test_genres_df['genres'] = test_genres_df['genres'].apply(lambda x: x.split(','))

# Encode genres using `mlb` (loaded from the training step)
encoded_genres = mlb.transform(test_genres_df['genres']).astype(float)

# Create a DataFrame with the encoded genres
encoded_df = pd.DataFrame(encoded_genres, columns=mlb.classes_)

# Combine the 'id' column with the encoded genres
final_encoded_df = pd.concat([test_genres_df['id'], encoded_df], axis=1)

# Save the encoded data to a CSV file
encoded_csv_path = 'encoded_test_genres.csv'
final_encoded_df.to_csv(encoded_csv_path, index=False)
print(f"Encoded test genres saved to: {encoded_csv_path}")

import boto3

# Load the encoded CSV
encoded_data = pd.read_csv(encoded_csv_path)

# Drop the 'id' column and prepare features
features = encoded_data.drop(columns=['id']).values

# Convert features to CSV format
payload = ",".join(map(str, features[0]))  # Single row as a CSV string

# SageMaker runtime client
runtime = boto3.client('sagemaker-runtime')

# Send the request to the endpoint
response = runtime.invoke_endpoint(
    EndpointName='movie-recommendation-AI',  # Replace with your endpoint name
    ContentType='text/csv',  # Required content type for XGBoost
    Body=payload
)

# Parse the response
predicted_label = response['Body'].read().decode('utf-8').strip()
print("Predicted Encoded Label:", predicted_label)
print(response['Body'])

# Download label_mapping from S3
s3 = boto3.client('s3')
s3.download_file('movierecommendations3', 'label_mapping.json', 'label_mapping.json')

# Load label_mapping
with open('label_mapping.json', 'r') as f:
    label_mapping = json.load(f)

print("label_mapping loaded successfully.")
print("Number of Classes:", len(label_mapping))

# Decode the predicted label
predicted_movie_title = label_mapping.get(str(int(float(predicted_label))), "Unknown")
print("Predicted Movie Title:", predicted_movie_title)

s3 = boto3.client('s3')

# Save predictions to a file
predictions_file = '/tmp/predictions.txt'
with open(predictions_file, 'w') as f:
    f.write('\n'.join(predicted_movie_title))

# Upload file to S3
s3.upload_file(
    Filename=predictions_file,
    Bucket='movierecommendations3',
    Key='predictions.txt'
)